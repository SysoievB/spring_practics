spring.application.name=liquibase_mssql
# MS SQL
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=liquibase_mssql;encrypt=true;trustServerCertificate=true
spring.datasource.username=sa
spring.datasource.password=YourStrong!Passw0rd
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
# Hibernate properties
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# Liquibase configuration
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml
#spring.liquibase.enabled=true
liquibase.sql.logLevel=INFO
logging.level.liquibase.executor=DEBUG

# SSL/TLS Configuration for SQL Server Connection
# - `encrypt=true`: Enables SSL/TLS encryption for the connection to the SQL Server.
#   This ensures that all data transmitted between the application and the database is encrypted.
# - `trustServerCertificate=true`: Allows the application to trust the SQL Server's SSL certificate
#   without validating it. This is useful for development or testing environments where the server
#   uses a self-signed certificate. In production, this should be set to `false` and a valid
#   certificate should be used.
# Docker Compose Integration
spring.docker.compose.enabled=false
#   Disables Spring Boot's automatic Docker Compose integration.
#   When set to `false`, the application will not attempt to start or manage Docker Compose services.
#   This is useful if you want to manually manage Docker Compose or if you are not using Docker Compose
#   for your environment.
